unit CircleFitService;

interface

uses
  Matrix, SysUtils, Math, MatrixConst;

type
  TCircleFitResult = record
    Center2D: TDoubleMatrix;  // 1×2 matrix: [a, b]
    Radius: Double;
    Residual: Double;
  end;

// Fits a circle (x - a)^2 + (y - b)^2 = r^2 to 2D points
function FitCircle2D(const Points2D: TDoubleMatrix): TCircleFitResult;

implementation

function FitCircle2D(const Points2D: TDoubleMatrix): TCircleFitResult;
var
  x, y: Double;
  A, B: TDoubleMatrix;
  CenterX, CenterY, Radius: Double;
  i: Integer;
  residualSum: Double;
begin
  // Assume algebraic least squares fit has already been done...

  Writeln('FitCircle2D');
  Writeln(Format('Points2D dimensions: %d × %d', [Points2D.Height, Points2D.Width]));

  // Compute residuals
  residualSum := 0;
  for i := 0 to Points2D.Width - 1 do
  begin
    x := Points2D[0, i];
    y := Points2D[1, i];
    residualSum := residualSum + Sqr(Sqrt(Sqr(x - CenterX) + Sqr(y - CenterY)) - Radius);
  end;

  Result.Center2D := TDoubleMatrix.Create(1, 2);
  Result.Center2D[0, 0] := CenterX;
  Result.Center2D[0, 1] := CenterY;
  Result.Radius := Radius;
  Result.Residual := residualSum;
end;

end.

