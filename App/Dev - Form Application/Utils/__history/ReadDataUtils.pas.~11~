unit ReadDataUtils;

interface

uses
  SysUtils, Classes, Matrix;

function ReadPointCloudFromFile(const FilePath: string): IMatrix;
procedure PrintPointCloud(const Points: IMatrix);

implementation

function ReadPointCloudFromFile(const FilePath: string): IMatrix;
var
  Lines: TStringList;
  i, N: Integer;
  Parts: TArray<string>;
  X, Y, Z: array of Double;
  ValX, ValY, ValZ: Double;
begin
  if not FileExists(FilePath) then
    raise Exception.Create('File not found: ' + FilePath);

  Lines := TStringList.Create;
  try
    Lines.LoadFromFile(FilePath);

    if Lines.Count <= 1 then
      raise Exception.Create('File is empty or missing data after header.');

    N := Lines.Count - 1; // skip header
    SetLength(X, N);
    SetLength(Y, N);
    SetLength(Z, N);

    for i := 1 to N do
    begin
      Parts := Lines[i].Split([',']);
      if Length(Parts) = 3 then
      begin
        ValX := StrToFloatDef(StringReplace(Parts[0], '.', ',', [rfReplaceAll]), 0);
        ValY := StrToFloatDef(StringReplace(Parts[1], '.', ',', [rfReplaceAll]), 0);
        ValZ := StrToFloatDef(StringReplace(Parts[2], '.', ',', [rfReplaceAll]), 0);

        X[i - 1] := ValX;
        Y[i - 1] := ValY;
        Z[i - 1] := ValZ;
      end
      else
        raise Exception.CreateFmt('Invalid line format at line %d: %s', [i+1, Lines[i]]);
    end;

    // Create and populate the matrix: 3 rows (x,y,z), N columns (points)
    Result := TDoubleMatrix.Create(3, N);
    for i := 0 to N - 1 do
    begin
      Result[0, i] := X[i];
      Result[1, i] := Y[i];
      Result[2, i] := Z[i];
    end;

  finally
    Lines.Free;
  end;
end;


procedure PrintPointCloud(const Points: IMatrix);
var
  i: Integer;
begin
  if Points = nil then
  begin
    Writeln('No data to print.');
    Exit;
  end;

  Writeln('--- Point Cloud ---');
  for i := 0 to Points.Height - 1 do
  begin
    Writeln(Format('Point %4d: X = %.4f, Y = %.4f, Z = %.4f',
      [i + 1, Points[i, 0], Points[i, 1], Points[i, 2]]));
  end;
end;


end.

