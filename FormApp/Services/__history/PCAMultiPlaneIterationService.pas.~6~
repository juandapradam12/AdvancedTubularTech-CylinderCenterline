unit PCAMultiPlaneIterationService;

interface

uses
  Matrix;

type
  TPlaneScoreRecord = record
    DimX, DimY: Integer;
    Projection2D: TDoubleMatrix;
    Center2D: TDoubleMatrix;
    Radius: Double;
    Residual: Double;
    RadiusMean: Double;
    RadiusStd: Double;
  end;

  TPlaneScoreArray = array of TPlaneScoreRecord;

function ScoreAllPCAPlanes(
  const Points, EigenVectors, MeanVector: TDoubleMatrix
): TPlaneScoreArray;

implementation

uses
  SysUtils, Math, PCAProjectionService, CircleFitService;

function ComputeRadiusStats(
  const Points2D: TDoubleMatrix;
  CenterX, CenterY: Double;
  out MeanR, StdR: Double
): Boolean;
var
  i: Integer;
  dx, dy, r, sumR, sumSq, n: Double;
begin
  sumR := 0;
  sumSq := 0;
  n := Points2D.Width;

  for i := 0 to Points2D.Width - 1 do
  begin
    dx := Points2D[i, 0] - CenterX;
    dy := Points2D[i, 1] - CenterY;
    r := Sqrt(Sqr(dx) + Sqr(dy));

    sumR := sumR + r;
    sumSq := sumSq + r * r;
  end;

  MeanR := sumR / n;
  StdR := Sqrt((sumSq / n) - Sqr(MeanR));

  Result := True;
end;

function ScoreAllPCAPlanes(
  const Points, EigenVectors, MeanVector: TDoubleMatrix
): TPlaneScoreArray;
const
  DimPairs: array[0..2, 0..1] of Integer = ((0, 1), (0, 2), (1, 2));
var
  i: Integer;
  Proj: TDoubleMatrix;
  Fit: TCircleFitResult;
  RMean, RStd: Double;
  PointsT: TDoubleMatrix;
begin
  SetLength(Result, 3);

  Writeln('ScoreAllPCAPlanes');
  Writeln(Format('Points Size: %d rows × %d columns', [Points.Height, Points.Width]));

  PointsT := Points.Transpose;

  Writeln(Format('PointsT Size: %d rows × %d columns', [PointsT.Height, PointsT.Width]));


  for i := 0 to 2 do
  begin
    Result[i].DimX := DimPairs[i][0];
    Result[i].DimY := DimPairs[i][1];

    Proj := ProjectToPlane(PointsT, EigenVectors, MeanVector, Result[i].DimX, Result[i].DimY);

    Writeln(Format('Proj Size: %d rows × %d columns', [Proj.Height, Proj.Width]));

    Result[i].Projection2D := Proj;

    Fit := FitCircle2D(Proj);

    Result[i].Center2D := TDoubleMatrix.Create(1, 2);
    Result[i].Center2D[0, 0] := Fit.Center2D[0, 0];
    Result[i].Center2D[0, 1] := Fit.Center2D[0, 1];

    Result[i].Radius := Fit.Radius;
    Result[i].Residual := Fit.Residual;

    ComputeRadiusStats(Proj, Fit.Center2D[0, 0], Fit.Center2D[0, 1], RMean, RStd);
    Result[i].RadiusMean := RMean;
    Result[i].RadiusStd := RStd;
  end;
end;

end.

